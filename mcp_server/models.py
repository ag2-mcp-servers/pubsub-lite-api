# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:40:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class CancelOperationRequest(BaseModel):
    pass


class Capacity(BaseModel):
    publishMibPerSec: Optional[int] = Field(
        None,
        description='Publish throughput capacity per partition in MiB/s. Must be >= 4 and <= 16.',
    )
    subscribeMibPerSec: Optional[int] = Field(
        None,
        description='Subscribe throughput capacity per partition in MiB/s. Must be >= 4 and <= 32.',
    )


class CommitCursorResponse(BaseModel):
    pass


class ComputeHeadCursorRequest(BaseModel):
    partition: Optional[str] = Field(
        None,
        description='Required. The partition for which we should compute the head cursor.',
    )


class ComputeMessageStatsResponse(BaseModel):
    messageBytes: Optional[str] = Field(
        None, description='The number of quota bytes accounted to these messages.'
    )
    messageCount: Optional[str] = Field(None, description='The count of messages.')
    minimumEventTime: Optional[str] = Field(
        None,
        description='The minimum event timestamp across these messages. For the purposes of this computation, if a message does not have an event time, we use the publish time. The timestamp will be unset if there are no messages.',
    )
    minimumPublishTime: Optional[str] = Field(
        None,
        description='The minimum publish timestamp across these messages. Note that publish timestamps within a partition are not guaranteed to be non-decreasing. The timestamp will be unset if there are no messages.',
    )


class Cursor(BaseModel):
    offset: Optional[str] = Field(
        None,
        description='The offset of a message within a topic partition. Must be greater than or equal 0.',
    )


class DeliveryRequirement(Enum):
    DELIVERY_REQUIREMENT_UNSPECIFIED = 'DELIVERY_REQUIREMENT_UNSPECIFIED'
    DELIVER_IMMEDIATELY = 'DELIVER_IMMEDIATELY'
    DELIVER_AFTER_STORED = 'DELIVER_AFTER_STORED'


class DeliveryConfig(BaseModel):
    deliveryRequirement: Optional[DeliveryRequirement] = Field(
        None, description='The DeliveryRequirement for this subscription.'
    )


class Empty(BaseModel):
    pass


class CurrentState(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    PAUSED = 'PAUSED'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NOT_FOUND = 'NOT_FOUND'


class DesiredState(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    PAUSED = 'PAUSED'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NOT_FOUND = 'NOT_FOUND'


class ListReservationTopicsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.',
    )
    topics: Optional[List[str]] = Field(
        None,
        description='The names of topics attached to the reservation. The order of the topics is unspecified.',
    )


class ListTopicSubscriptionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.',
    )
    subscriptions: Optional[List[str]] = Field(
        None,
        description='The names of subscriptions attached to the topic. The order of the subscriptions is unspecified.',
    )


class OperationMetadata(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None,
        description='The time the operation finished running. Not set if the operation has not completed.',
    )
    target: Optional[str] = Field(
        None,
        description='Resource path for the target of the operation. For example, targets of seeks are subscription resources, structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}',
    )
    verb: Optional[str] = Field(
        None, description='Name of the verb executed by the operation.'
    )


class PartitionConfig(BaseModel):
    capacity: Optional[Capacity] = Field(
        None, description='The capacity configuration.'
    )
    count: Optional[str] = Field(
        None,
        description='The number of partitions in the topic. Must be at least 1. Once a topic has been created the number of partitions can be increased but not decreased. Message ordering is not guaranteed across a topic resize. For more information see https://cloud.google.com/pubsub/lite/docs/topics#scaling_capacity',
    )
    scale: Optional[int] = Field(
        None,
        description='DEPRECATED: Use capacity instead which can express a superset of configurations. Every partition in the topic is allocated throughput equivalent to `scale` times the standard partition throughput (4 MiB/s). This is also reflected in the cost of this topic; a topic with `scale` of 2 and count of 10 is charged for 20 partitions. This value must be in the range [1,4].',
    )


class PartitionCursor(BaseModel):
    cursor: Optional[Cursor] = Field(None, description='The value of the cursor.')
    partition: Optional[str] = Field(None, description='The partition this is for.')


class PubSubConfig(BaseModel):
    topic: Optional[str] = Field(
        None,
        description='The name of the Pub/Sub topic. Structured like: projects/{project_number}/topics/{topic_id}. The topic may be changed.',
    )


class Reservation(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}',
    )
    throughputCapacity: Optional[str] = Field(
        None,
        description='The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.',
    )


class ReservationConfig(BaseModel):
    throughputReservation: Optional[str] = Field(
        None,
        description="The Reservation to use for this topic's throughput capacity. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}",
    )


class RetentionConfig(BaseModel):
    perPartitionBytes: Optional[str] = Field(
        None,
        description="The provisioned storage, in bytes, per partition. If the number of bytes stored in any of the topic's partitions grows beyond this value, older messages will be dropped to make room for newer ones, regardless of the value of `period`.",
    )
    period: Optional[str] = Field(
        None,
        description='How long a published message is retained. If unset, messages will be retained as long as the bytes retained for each partition is below `per_partition_bytes`.',
    )


class NamedTarget(Enum):
    NAMED_TARGET_UNSPECIFIED = 'NAMED_TARGET_UNSPECIFIED'
    TAIL = 'TAIL'
    HEAD = 'HEAD'


class SeekSubscriptionResponse(BaseModel):
    pass


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TimeTarget(BaseModel):
    eventTime: Optional[str] = Field(
        None,
        description='Request the cursor of the first message with event time greater than or equal to `event_time`. If messages are missing an event time, the publish time is used as a fallback. As event times are user supplied, subsequent messages may have event times less than `event_time` and should be filtered by the client, if necessary.',
    )
    publishTime: Optional[str] = Field(
        None,
        description='Request the cursor of the first message with publish time greater than or equal to `publish_time`. All messages thereafter are guaranteed to have publish times >= `publish_time`.',
    )


class Topic(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}',
    )
    partitionConfig: Optional[PartitionConfig] = Field(
        None, description="The settings for this topic's partitions."
    )
    reservationConfig: Optional[ReservationConfig] = Field(
        None, description="The settings for this topic's Reservation usage."
    )
    retentionConfig: Optional[RetentionConfig] = Field(
        None, description="The settings for this topic's message retention."
    )


class TopicPartitions(BaseModel):
    partitionCount: Optional[str] = Field(
        None, description='The number of partitions in the topic.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class CommitCursorRequest(BaseModel):
    cursor: Optional[Cursor] = Field(
        None, description='The new value for the committed cursor.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition for which to update the cursor. Partitions are zero indexed, so `partition` must be in the range [0, topic.num_partitions).',
    )


class ComputeHeadCursorResponse(BaseModel):
    headCursor: Optional[Cursor] = Field(None, description='The head cursor.')


class ComputeMessageStatsRequest(BaseModel):
    endCursor: Optional[Cursor] = Field(
        None,
        description='The exclusive end of the range. The range is empty if end_cursor <= start_cursor. Specifying a start_cursor before the first message and an end_cursor after the last message will retrieve all messages.',
    )
    partition: Optional[str] = Field(
        None,
        description='Required. The partition for which we should compute message stats.',
    )
    startCursor: Optional[Cursor] = Field(
        None, description='The inclusive start of the range.'
    )


class ComputeTimeCursorRequest(BaseModel):
    partition: Optional[str] = Field(
        None,
        description='Required. The partition for which we should compute the cursor.',
    )
    target: Optional[TimeTarget] = Field(
        None,
        description='Required. The target publish or event time. Specifying a future time will return an unset cursor.',
    )


class ComputeTimeCursorResponse(BaseModel):
    cursor: Optional[Cursor] = Field(
        None,
        description='If present, the cursor references the first message with time greater than or equal to the specified target time. If such a message cannot be found, the cursor will be unset (i.e. `cursor` is not present).',
    )


class ExportConfig(BaseModel):
    currentState: Optional[CurrentState] = Field(
        None,
        description='Output only. The current state of the export, which may be different to the desired state due to errors. This field is output only.',
    )
    deadLetterTopic: Optional[str] = Field(
        None,
        description='Optional. The name of an optional Pub/Sub Lite topic to publish messages that can not be exported to the destination. For example, the message can not be published to the Pub/Sub service because it does not satisfy the constraints documented at https://cloud.google.com/pubsub/docs/publisher. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}. Must be within the same project and location as the subscription. The topic may be changed or removed.',
    )
    desiredState: Optional[DesiredState] = Field(
        None,
        description='The desired state of this export. Setting this to values other than `ACTIVE` and `PAUSED` will result in an error.',
    )
    pubsubConfig: Optional[PubSubConfig] = Field(
        None,
        description='Messages are automatically written from the Pub/Sub Lite topic associated with this subscription to a Pub/Sub topic.',
    )


class ListPartitionCursorsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    partitionCursors: Optional[List[PartitionCursor]] = Field(
        None, description='The partition cursors from this request.'
    )


class ListReservationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.',
    )
    reservations: Optional[List[Reservation]] = Field(
        None,
        description='The list of reservation in the requested parent. The order of the reservations is unspecified.',
    )


class ListTopicsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.',
    )
    topics: Optional[List[Topic]] = Field(
        None,
        description='The list of topic in the requested parent. The order of the topics is unspecified.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class SeekSubscriptionRequest(BaseModel):
    namedTarget: Optional[NamedTarget] = Field(
        None,
        description='Seek to a named position with respect to the message backlog.',
    )
    timeTarget: Optional[TimeTarget] = Field(
        None,
        description='Seek to the first message whose publish or event time is greater than or equal to the specified query time. If no such message can be located, will seek to the end of the message backlog.',
    )


class Subscription(BaseModel):
    deliveryConfig: Optional[DeliveryConfig] = Field(
        None, description="The settings for this subscription's message delivery."
    )
    exportConfig: Optional[ExportConfig] = Field(
        None,
        description='If present, messages are automatically written from the Pub/Sub Lite topic associated with this subscription to a destination.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the subscription. Structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}',
    )
    topic: Optional[str] = Field(
        None,
        description='The name of the topic this subscription is attached to. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListSubscriptionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token that can be sent as `page_token` to retrieve the next page of results. If this field is omitted, there are no more results.',
    )
    subscriptions: Optional[List[Subscription]] = Field(
        None,
        description='The list of subscriptions in the requested parent. The order of the subscriptions is unspecified.',
    )
